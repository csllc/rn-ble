import { BleDisconnectPeripheralEvent, BleDiscoverPeripheralEvent, BleManagerDidUpdateStateEvent, BleManagerDidUpdateValueForCharacteristicEvent, BleState, Peripheral, StartOptions } from 'react-native-ble-manager';
import { EmitterSubscription } from 'react-native';
import EventEmitter from 'eventemitter3';
import { BlePeripheral } from './BlePeripheral';
import { BleCharacteristic } from './BleCharacteristic';
import { BleNotifyCallback, DisconnectOptions, InitializeOptions, StartScanOptions, BleEventName, BleDiscoverCallback } from './types';
export declare const Ble: {
    new (): {
        eventNames(): (string | symbol)[];
        listeners<T extends string | symbol>(event: T): ((...args: any[]) => void)[];
        listenerCount(event: string | symbol): number;
        emit<T_1 extends string | symbol>(event: T_1, ...args: any[]): boolean;
        on<T_2 extends string | symbol>(event: T_2, fn: (...args: any[]) => void, context?: any): any;
        addListener<T_3 extends string | symbol>(event: T_3, fn: (...args: any[]) => void, context?: any): any;
        once<T_4 extends string | symbol>(event: T_4, fn: (...args: any[]) => void, context?: any): any;
        removeListener<T_5 extends string | symbol>(event: T_5, fn?: ((...args: any[]) => void) | undefined, context?: any, once?: boolean | undefined): any;
        off<T_6 extends string | symbol>(event: T_6, fn?: ((...args: any[]) => void) | undefined, context?: any, once?: boolean | undefined): any;
        removeAllListeners(event?: string | symbol | undefined): any;
    };
    eventHandlers: EmitterSubscription[];
    events: EventEmitter<string | symbol, any>;
    isSupported(): Promise<boolean>;
    isAllowed(): Promise<boolean>;
    driver(): {
        read(peripheralId: string, serviceUUID: string, characteristicUUID: string): Promise<number[]>;
        readDescriptor(peripheralId: string, serviceUUID: string, characteristicUUID: string, descriptorUUID: string): Promise<number[]>;
        readRSSI(peripheralId: string): Promise<number>;
        refreshCache(peripheralId: string): Promise<boolean>;
        retrieveServices(peripheralId: string, serviceUUIDs?: string[] | undefined): Promise<import("react-native-ble-manager").PeripheralInfo>;
        write(peripheralId: string, serviceUUID: string, characteristicUUID: string, data: number[], maxByteSize?: number | undefined): Promise<void>;
        writeWithoutResponse(peripheralId: string, serviceUUID: string, characteristicUUID: string, data: number[], maxByteSize?: number | undefined, queueSleepTime?: number | undefined): Promise<void>;
        connect(peripheralId: string, options?: import("react-native-ble-manager").ConnectOptions | undefined): Promise<void>;
        createBond(peripheralId: string, peripheralPin?: string | null | undefined): Promise<void>;
        removeBond(peripheralId: string): Promise<void>;
        disconnect(peripheralId: string, force?: boolean | undefined): Promise<void>;
        startNotification(peripheralId: string, serviceUUID: string, characteristicUUID: string): Promise<void>;
        startNotificationUseBuffer(peripheralId: string, serviceUUID: string, characteristicUUID: string, buffer: number): Promise<void>;
        stopNotification(peripheralId: string, serviceUUID: string, characteristicUUID: string): Promise<void>;
        checkState(): Promise<BleState>;
        start(options?: StartOptions | undefined): Promise<void>;
        scan(serviceUUIDs: string[], seconds: number, allowDuplicates?: boolean | undefined, scanningOptions?: import("react-native-ble-manager").ScanOptions | undefined): Promise<void>;
        stopScan(): Promise<void>;
        enableBluetooth(): Promise<void>;
        getConnectedPeripherals(serviceUUIDs?: string[] | undefined): Promise<Peripheral[]>;
        getBondedPeripherals(): Promise<Peripheral[]>;
        getDiscoveredPeripherals(): Promise<Peripheral[]>;
        removePeripheral(peripheralId: string): Promise<void>;
        isPeripheralConnected(peripheralId: string, serviceUUIDs?: string[] | undefined): Promise<boolean>;
        requestConnectionPriority(peripheralId: string, connectionPriority: import("react-native-ble-manager").ConnectionPriority): Promise<boolean>;
        requestMTU(peripheralId: string, mtu: number): Promise<number>;
        setName(name: string): void;
        getMaximumWriteValueLengthForWithoutResponse(peripheralId: string): Promise<number>;
        getMaximumWriteValueLengthForWithResponse(peripheralId: string): Promise<number>;
    };
    initialize(options: InitializeOptions): Promise<void>;
    enable(): Promise<void>;
    checkState(): Promise<void>;
    on(event: BleEventName, fn: (...args: any[]) => void, context?: any): any;
    off(event: BleEventName, fn: (...args: any[]) => void, context?: any): any;
    destroy(): Promise<void>;
    getKnownDevices(services: string[]): Promise<BlePeripheral[]>;
    startScan(services: string[], cb: BleDiscoverCallback | null, options: StartScanOptions): Promise<void>;
    stopScan(): Promise<void>;
    connect(peripheral: BlePeripheral): Promise<void>;
    disconnect(peripheral: BlePeripheral, options?: DisconnectOptions): Promise<void>;
    rssi(peripheral: BlePeripheral): Promise<number>;
    read(peripheral: BlePeripheral, characteristic: BleCharacteristic): Promise<number[]>;
    write(peripheral: BlePeripheral, characteristic: BleCharacteristic, data: number[]): Promise<void>;
    subscribe(peripheral: BlePeripheral, characteristic: BleCharacteristic, cb: BleNotifyCallback): Promise<void>;
    unsubscribe(peripheral: BlePeripheral, characteristic: BleCharacteristic): Promise<void>;
    findCharacteristics(peripheral: BlePeripheral, service: string, wanted: {
        name: string;
        characteristic: string;
        required: boolean;
    }[]): Promise<Map<string, BleCharacteristic>>;
    _onDiscover(event: BleDiscoverPeripheralEvent): void;
    _onStopScan(reason: any): void;
    _onDisconnect(event: BleDisconnectPeripheralEvent): void;
    _onNotify(data: BleManagerDidUpdateValueForCharacteristicEvent): void;
    _onUpdateState(event: BleManagerDidUpdateStateEvent): void;
    _reportState(state: BleState): void;
    prefixed: string | boolean;
    readonly EventEmitter: EventEmitter.EventEmitterStatic;
};
